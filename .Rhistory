model_data <- d %>%
select(
'rem_any',
matches(c('reached_b4goal', 'country',
'highint', 'rewardint', 'joint', 'dc', 'joint_single',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch'))) %>%
drop_na()
model_pooled_no_covariates <- lm(
reached_b4goal ~ rem_any +
highint + rewardint + joint + dc + joint_single +
factor(country),
data = model_data
)
model_pooled_with_covariates <- lm(
reached_b4goal ~  rem_any +
highint + rewardint + joint + dc + joint_single +
female + age + highschool_completed +
wealthy + married + inc_7d +
hyperbolic + spent_b4isaved + saved_asmuch +
missing_female + missing_age + missing_highschool_completed +
missing_wealthy + missing_married + missing_inc_7d +
missing_hyperbolic + missing_spent_b4isaved + missing_saved_asmuch +
factor(country),
data = model_data
)
calculate_msr(model_pooled_no_covariates)
calculate_msr(model_pooled_with_covariates)
anova(model_pooled_with_covariates, model_pooled_no_covariates, test = 'F')
# you can uncomment the following line to conduct a test with robust standard errors
coeftest(model_pooled_no_covariates, vcov. = vcovHC)
coeftest(model_pooled_with_covariates, vcov. = vcovHC)[1:16,]
model_data %>%
filter(missing_female == 1) %>%
select(missing_age) %>%
summarise(missing_age_rate = mean(missing_age))
model_pooled_with_covariates <- d %>%
select(
'rem_any', 'reached_b4goal', 'country',
'highint', 'rewardint', 'joint', 'dc', 'joint_single',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch', 'country') %>%
lm(reached_b4goal ~ . - country + factor(country), data = .)
coeftest(model_pooled_with_covariates, vcovHC)
dv_mean <- round(mean(d$reached_b4goal), 3)
stargazer(
model_pooled_no_covariates, model_pooled_with_covariates,
type = 'latex',
se = list(
sqrt(diag(vcovHC(model_pooled_no_covariates))),
sqrt(diag(vcovHC(model_pooled_with_covariates)))),
omit = c(
'highint', 'rewardint', 'joint', 'dc', 'joint_single',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch',
'country', 'Constant'),
covariate.labels = 'Sent Any Reminder',
add.lines = list(
c('Marketing Offers Dummies', 'Yes', 'Yes'),
c('Baseline Controls', 'No', 'Yes'),
c('Country Fixed Effects', 'Yes', 'Yes'),
c('Mean of DV', dv_mean, dv_mean)),
omit.stat = c('ser', 'rsq', 'adj.rsq', 'f'),
dep.var.labels = "1 = Met Commitment",
dep.var.caption = "Savings Measure on LHS",
header = FALSE,
title = 'Estimates of the Effect of Getting Any Reminder'
)
test_that(
'the studetns have fitted simulated data, model 1',
expect_s3_class(model_1, 'lm')
)
# if you want to read about specifying statistical models, you can read
# here: https://cran.r-project.org/doc/manuals/R-intro.html#Formulae-for-statistical-models'
# note, using the I() function is preferred over using poly()
model_1 <- lm(y ~ x1 + x2 + x3, data = d)
library(dplyr)
library(tidyr)
library(broom)
library(ggplot2)
library(patchwork)
library(stargazer)
library(sandwich)
library(lmtest)
create_homoskedastic_data <- function(n = 100) {
d <- data.frame(id = 1:n) %>%
mutate(
x1 = runif(n=n, min=0, max=10),
x2 = rnorm(n=n, mean=10, sd=2),
x3 = rnorm(n=n, mean=0, sd=2),
y  = .5 + 1*x1 + 2*x2 + .25*x3^2 + rnorm(n=n, mean=0, sd=1)
)
return(d)
}
d <- create_homoskedastic_data(n=100)
outcome_histogram <- d %>%
ggplot() + # fill in the rest of this chunk to create a plot
aes(x = y) +
geom_histogram(bins = 20) +
labs(
x = "Outcome Values",
title = "Histogram of Outcomes",
subtitle = "It looks like the CLT should work."
)
outcome_histogram
# if you want to read about specifying statistical models, you can read
# here: https://cran.r-project.org/doc/manuals/R-intro.html#Formulae-for-statistical-models'
# note, using the I() function is preferred over using poly()
model_1 <- lm(y ~ x1 + x2 + x3, data = d)
model_2 <- lm(y ~ x1 + x2 + I(x3^2), data = d)
test_that(
'the studetns have fitted simulated data, model 1',
expect_s3_class(model_1, 'lm')
)
library(dplyr)
library(tidyr)
library(broom)
library(ggplot2)
library(patchwork)
library(stargazer)
library(sandwich)
library(lmtest)
create_homoskedastic_data <- function(n = 100) {
d <- data.frame(id = 1:n) %>%
mutate(
x1 = runif(n=n, min=0, max=10),
x2 = rnorm(n=n, mean=10, sd=2),
x3 = rnorm(n=n, mean=0, sd=2),
y  = .5 + 1*x1 + 2*x2 + .25*x3^2 + rnorm(n=n, mean=0, sd=1)
)
return(d)
}
d <- create_homoskedastic_data(n=100)
outcome_histogram <- d %>%
ggplot() + # fill in the rest of this chunk to create a plot
aes(x = y) +
geom_histogram(bins = 20) +
labs(
x = "Outcome Values",
title = "Histogram of Outcomes",
subtitle = "It looks like the CLT should work."
)
outcome_histogram
# if you want to read about specifying statistical models, you can read
# here: https://cran.r-project.org/doc/manuals/R-intro.html#Formulae-for-statistical-models'
# note, using the I() function is preferred over using poly()
model_1 <- lm(y ~ x1 + x2 + x3, data = d)
model_2 <- lm(y ~ x1 + x2 + I(x3^2), data = d)
calculate_msr <- function(model) {
# This function takes a model, and uses the `resid` function
# together with the definition of the mse to produce
# the MEAN of the squared errors.
msr <- mean(resid(model)^2)
return(msr)
}
calculate_msr(model_1)
calculate_msr(model_2)
# ?broom::augment # if you would like to view the documentation
d_model_1 <- augment(model_1)
d_model_2 <- augment(model_2)
# if you get a message "Pick a better `binwidth`, do so!"
model_1_residuals_histogram <- d_model_1 %>%
ggplot() +
aes(x = .resid) +
geom_histogram(bins = 20) +
labs(title = 'Model 1 Residuals')
model_2_residuals_histogram <- d_model_2 %>%
ggplot() +
aes(x = .fitted - y) +
geom_histogram(bins = 20) +
labs(title = 'Model 2 Residuals')
outcome_histogram /
model_1_residuals_histogram /
model_2_residuals_histogram
# Although it isn't necessary, we're going to remove all the data objects that
# you have created to this point so that you can start the next section with
# clear data.
rm(list = setdiff(ls(), 'ca lculate_msr', 'model_1', 'model_2', 'model_3', 'model_4'))
# Although it isn't necessary, we're going to remove all the data objects that
# you have created to this point so that you can start the next section with
# clear data.
rm(list = setdiff(ls(), 'calculate_msr', 'model_1', 'model_2', 'model_3', 'model_4'))
# Although it isn't necessary, we're going to remove all the data objects that
# you have created to this point so that you can start the next section with
# clear data.
rm(list = setdiff(ls(), c('calculate_msr', 'model_1', 'model_2', 'model_3', 'model_4')))
library(dplyr)
library(tidyr)
library(broom)
library(ggplot2)
library(patchwork)
library(stargazer)
library(sandwich)
library(lmtest)
create_homoskedastic_data <- function(n = 100) {
d <- data.frame(id = 1:n) %>%
mutate(
x1 = runif(n=n, min=0, max=10),
x2 = rnorm(n=n, mean=10, sd=2),
x3 = rnorm(n=n, mean=0, sd=2),
y  = .5 + 1*x1 + 2*x2 + .25*x3^2 + rnorm(n=n, mean=0, sd=1)
)
return(d)
}
d <- create_homoskedastic_data(n=100)
outcome_histogram <- d %>%
ggplot() + # fill in the rest of this chunk to create a plot
aes(x = y) +
geom_histogram(bins = 20) +
labs(
x = "Outcome Values",
title = "Histogram of Outcomes",
subtitle = "It looks like the CLT should work."
)
outcome_histogram
# if you want to read about specifying statistical models, you can read
# here: https://cran.r-project.org/doc/manuals/R-intro.html#Formulae-for-statistical-models'
# note, using the I() function is preferred over using poly()
model_1 <- lm(y ~ x1 + x2 + x3, data = d)
model_2 <- lm(y ~ x1 + x2 + I(x3^2), data = d)
calculate_msr <- function(model) {
# This function takes a model, and uses the `resid` function
# together with the definition of the mse to produce
# the MEAN of the squared errors.
msr <- mean(resid(model)^2)
return(msr)
}
calculate_msr(model_1)
calculate_msr(model_2)
# ?broom::augment # if you would like to view the documentation
d_model_1 <- augment(model_1)
d_model_2 <- augment(model_2)
# if you get a message "Pick a better `binwidth`, do so!"
model_1_residuals_histogram <- d_model_1 %>%
ggplot() +
aes(x = .resid) +
geom_histogram(bins = 20) +
labs(title = 'Model 1 Residuals')
model_2_residuals_histogram <- d_model_2 %>%
ggplot() +
aes(x = .fitted - y) +
geom_histogram(bins = 20) +
labs(title = 'Model 2 Residuals')
outcome_histogram /
model_1_residuals_histogram /
model_2_residuals_histogram
# Although it isn't necessary, we're going to remove all the data objects that
# you have created to this point so that you can start the next section with
# clear data.
rm(list = setdiff(ls(), c('calculate_msr', 'model_1', 'model_2', 'model_3', 'model_4')))
d <- haven::read_dta(file = './karlan_data/analysis_dataallcountries.dta')
glimpse(d)
f_test_data <- d %>%
filter(country == 3) %>%
select(matches(c(
'rem_any',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch'))) %>%
drop_na()
short_model <- lm(rem_any ~ 1, data = f_test_data)
long_model  <- lm(rem_any ~ female + age + highschool_completed +
wealthy + married + inc_7d +
hyperbolic + spent_b4isaved + saved_asmuch +
missing_female + missing_age + missing_highschool_completed +
missing_wealthy + missing_married + missing_inc_7d +
missing_hyperbolic + missing_spent_b4isaved + missing_saved_asmuch,
data = f_test_data)
anova(long_model, short_model, test = 'F')
model_data <- d %>%
select(
'rem_any',
matches(c('reached_b4goal', 'country',
'highint', 'rewardint', 'joint', 'dc', 'joint_single',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch'))) %>%
drop_na()
model_pooled_no_covariates <- lm(
reached_b4goal ~ rem_any +
highint + rewardint + joint + dc + joint_single +
factor(country),
data = model_data
)
model_pooled_with_covariates <- lm(
reached_b4goal ~  rem_any +
highint + rewardint + joint + dc + joint_single +
female + age + highschool_completed +
wealthy + married + inc_7d +
hyperbolic + spent_b4isaved + saved_asmuch +
missing_female + missing_age + missing_highschool_completed +
missing_wealthy + missing_married + missing_inc_7d +
missing_hyperbolic + missing_spent_b4isaved + missing_saved_asmuch +
factor(country),
data = model_data
)
calculate_msr(model_pooled_no_covariates)
calculate_msr(model_pooled_with_covariates)
anova(model_pooled_with_covariates, model_pooled_no_covariates, test = 'F')
# you can uncomment the following line to conduct a test with robust standard errors
coeftest(model_pooled_no_covariates, vcov. = vcovHC)
coeftest(model_pooled_with_covariates, vcov. = vcovHC)[1:16,]
model_data %>%
filter(missing_female == 1) %>%
select(missing_age) %>%
summarise(missing_age_rate = mean(missing_age))
model_pooled_with_covariates <- d %>%
select(
'rem_any', 'reached_b4goal', 'country',
'highint', 'rewardint', 'joint', 'dc', 'joint_single',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch', 'country') %>%
lm(reached_b4goal ~ . - country + factor(country), data = .)
coeftest(model_pooled_with_covariates, vcovHC)
dv_mean <- round(mean(d$reached_b4goal), 3)
stargazer(
model_pooled_no_covariates, model_pooled_with_covariates,
type = 'latex',
se = list(
sqrt(diag(vcovHC(model_pooled_no_covariates))),
sqrt(diag(vcovHC(model_pooled_with_covariates)))),
omit = c(
'highint', 'rewardint', 'joint', 'dc', 'joint_single',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch',
'country', 'Constant'),
covariate.labels = 'Sent Any Reminder',
add.lines = list(
c('Marketing Offers Dummies', 'Yes', 'Yes'),
c('Baseline Controls', 'No', 'Yes'),
c('Country Fixed Effects', 'Yes', 'Yes'),
c('Mean of DV', dv_mean, dv_mean)),
omit.stat = c('ser', 'rsq', 'adj.rsq', 'f'),
dep.var.labels = "1 = Met Commitment",
dep.var.caption = "Savings Measure on LHS",
header = FALSE,
title = 'Estimates of the Effect of Getting Any Reminder'
)
library(testthat)
knitr::purl('./unit_09_with_solutions.Rmd')
test_that(
'the outcome histogram exists',
expect_s3_class(outcome_histogram, 'gg')
)
test_that(
'the studetns have fitted simulated data, model 1',
expect_s3_class(model_1, 'lm')
)
library(dplyr)
library(tidyr)
library(broom)
library(ggplot2)
library(patchwork)
library(stargazer)
library(sandwich)
library(lmtest)
create_homoskedastic_data <- function(n = 100) {
d <- data.frame(id = 1:n) %>%
mutate(
x1 = runif(n=n, min=0, max=10),
x2 = rnorm(n=n, mean=10, sd=2),
x3 = rnorm(n=n, mean=0, sd=2),
y  = .5 + 1*x1 + 2*x2 + .25*x3^2 + rnorm(n=n, mean=0, sd=1)
)
return(d)
}
d <- create_homoskedastic_data(n=100)
outcome_histogram <- d %>%
ggplot() + # fill in the rest of this chunk to create a plot
aes(x = y) +
geom_histogram(bins = 20) +
labs(
x = "Outcome Values",
title = "Histogram of Outcomes",
subtitle = "It looks like the CLT should work."
)
outcome_histogram
# if you want to read about specifying statistical models, you can read
# here: https://cran.r-project.org/doc/manuals/R-intro.html#Formulae-for-statistical-models'
# note, using the I() function is preferred over using poly()
model_1 <- lm(y ~ x1 + x2 + x3, data = d)
model_2 <- lm(y ~ x1 + x2 + I(x3^2), data = d)
calculate_msr <- function(model) {
# This function takes a model, and uses the `resid` function
# together with the definition of the mse to produce
# the MEAN of the squared errors.
msr <- mean(resid(model)^2)
return(msr)
}
calculate_msr(model_1)
calculate_msr(model_2)
# ?broom::augment # if you would like to view the documentation
d_model_1 <- augment(model_1)
d_model_2 <- augment(model_2)
# if you get a message "Pick a better `binwidth`, do so!"
model_1_residuals_histogram <- d_model_1 %>%
ggplot() +
aes(x = .resid) +
geom_histogram(bins = 20) +
labs(title = 'Model 1 Residuals')
model_2_residuals_histogram <- d_model_2 %>%
ggplot() +
aes(x = .fitted - y) +
geom_histogram(bins = 20) +
labs(title = 'Model 2 Residuals')
outcome_histogram /
model_1_residuals_histogram /
model_2_residuals_histogram
d <- haven::read_dta(file = './karlan_data/analysis_dataallcountries.dta')
glimpse(d)
f_test_data <- d %>%
filter(country == 3) %>%
select(matches(c(
'rem_any',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch'))) %>%
drop_na()
short_model <- lm(rem_any ~ 1, data = f_test_data)
long_model  <- lm(rem_any ~ female + age + highschool_completed +
wealthy + married + inc_7d +
hyperbolic + spent_b4isaved + saved_asmuch +
missing_female + missing_age + missing_highschool_completed +
missing_wealthy + missing_married + missing_inc_7d +
missing_hyperbolic + missing_spent_b4isaved + missing_saved_asmuch,
data = f_test_data)
anova(long_model, short_model, test = 'F')
model_data <- d %>%
select(
'rem_any',
matches(c('reached_b4goal', 'country',
'highint', 'rewardint', 'joint', 'dc', 'joint_single',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch'))) %>%
drop_na()
model_pooled_no_covariates <- lm(
reached_b4goal ~ rem_any +
highint + rewardint + joint + dc + joint_single +
factor(country),
data = model_data
)
model_pooled_with_covariates <- lm(
reached_b4goal ~  rem_any +
highint + rewardint + joint + dc + joint_single +
female + age + highschool_completed +
wealthy + married + inc_7d +
hyperbolic + spent_b4isaved + saved_asmuch +
missing_female + missing_age + missing_highschool_completed +
missing_wealthy + missing_married + missing_inc_7d +
missing_hyperbolic + missing_spent_b4isaved + missing_saved_asmuch +
factor(country),
data = model_data
)
calculate_msr(model_pooled_no_covariates)
calculate_msr(model_pooled_with_covariates)
anova(model_pooled_with_covariates, model_pooled_no_covariates, test = 'F')
# you can uncomment the following line to conduct a test with robust standard errors
coeftest(model_pooled_no_covariates, vcov. = vcovHC)
coeftest(model_pooled_with_covariates, vcov. = vcovHC)[1:16,]
model_data %>%
filter(missing_female == 1) %>%
select(missing_age) %>%
summarise(missing_age_rate = mean(missing_age))
model_pooled_with_covariates <- d %>%
select(
'rem_any', 'reached_b4goal', 'country',
'highint', 'rewardint', 'joint', 'dc', 'joint_single',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch', 'country') %>%
lm(reached_b4goal ~ . - country + factor(country), data = .)
coeftest(model_pooled_with_covariates, vcovHC)
dv_mean <- round(mean(d$reached_b4goal), 3)
stargazer(
model_pooled_no_covariates, model_pooled_with_covariates,
type = 'latex',
se = list(
sqrt(diag(vcovHC(model_pooled_no_covariates))),
sqrt(diag(vcovHC(model_pooled_with_covariates)))),
omit = c(
'highint', 'rewardint', 'joint', 'dc', 'joint_single',
'female', 'age', 'highschool_completed', 'wealthy', 'married',
'inc_7d', 'hyperbolic', 'spent_b4isaved', 'saved_asmuch',
'country', 'Constant'),
covariate.labels = 'Sent Any Reminder',
add.lines = list(
c('Marketing Offers Dummies', 'Yes', 'Yes'),
c('Baseline Controls', 'No', 'Yes'),
c('Country Fixed Effects', 'Yes', 'Yes'),
c('Mean of DV', dv_mean, dv_mean)),
omit.stat = c('ser', 'rsq', 'adj.rsq', 'f'),
dep.var.labels = "1 = Met Commitment",
dep.var.caption = "Savings Measure on LHS",
header = FALSE,
title = 'Estimates of the Effect of Getting Any Reminder'
)
library(testthat)
knitr::purl('./unit_09_with_solutions.Rmd')
test_that(
'the outcome histogram exists',
expect_s3_class(outcome_histogram, 'gg')
)
test_that(
'the students have fitted simulated data, model 1',
expect_s3_class(model_1, 'lm')
)
test_that(
'the students have fitted simulated data, model 4',
expect_s3_class(model_1, 'lm'),
expect_s3_class(model_4, 'lm')
)
source("~/.active-rstudio-document", echo=TRUE)
setwd('~/MIDS/w241/mids-w241-live-session/')
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
