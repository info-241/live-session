}
simulation(long_or_short = 'short', cov_z_x = 1)
simulation(long_or_short = 'short', cov_z_x = 1)
simulation <- function(long_or_short='long', cov_z_x=0) {
estimated_results <- rep(NA, 1000)
pb <- progress_bar$new(total = 1000)
for(i in 1:1000) {
estimated_resuls[i] <- coef(omitted_variables_bias(cov_z_x = cov_z_x, long_or_short = long_or_short))['z']
pb$tick()
}
ggplot() +
aes(x = estimated_resuls) +
geom_histogram(bins = 30)
}
simulation(long_or_short = 'short', cov_z_x = .2)
simulation(long_or_short = 'short', cov_z_x = .1)
2
library(dplyr)
library(ggplot2)
library(MASS)
library(progress)
variance_covariance_matrix <- matrix(
data = c(2, cov_z_x, cov_z_x, 2),
nrow = 2, ncol = 2, byrow = TRUE
)
ls()
variance_covariance_matrix
data_matrix <- mvrnorm(n=100, mu=c(0, 0), Sigma=variance_covariance_matrix)
data_matrix
cov_z_x = 1
variance_covariance_matrix <- matrix(
data = c(2, cov_z_x, cov_z_x, 2),
nrow = 2, ncol = 2, byrow = TRUE
)
variance_covariance_matrix
data_matrix <- mvrnorm(n=100, mu=c(0, 0), Sigma=variance_covariance_matrix)
data_matrix
cov(data_matrix[,1], data_matrix[,2])
data_matrix <- mvrnorm(n=10000, mu=c(0, 0), Sigma=variance_covariance_matrix)
cov(data_matrix[,1], data_matrix[,2])
n=100
d <- data.frame(
id = 1:n,
z  = data_matrix[ , 1],
x  = data_matrix[ , 2]) %>%
mutate(
y = beta0 + (beta1 * z) + (beta2 * x) + rnorm(n=n)
)
beta0=0
beta1=1
beta2=2
d <- data.frame(
id = 1:n,
z  = data_matrix[ , 1],
x  = data_matrix[ , 2]) %>%
mutate(
y = beta0 + (beta1 * z) + (beta2 * x) + rnorm(n=n)
)
d
head(d)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(MASS)
library(progress)
## this supposes a true model that is:
## y ~ \beta_{0} + \beta_{1}z_{i} + \beta_{2}x_{x} + \epsilon_{i}
##
## and an actually estimated model that is:
## y ~ \tilde{\beta}_{0} + \tilde{\beta}_{1}z_{i} + \tilde{epsilon}_{i}
omitted_variables_bias <- function(
n=100, beta0=0, beta1=1, beta2=2, cov_z_x=0,
long_or_short=c('long', 'short')) {
require(dplyr)
require(MASS)
variance_covariance_matrix <- matrix(
data = c(2, cov_z_x, cov_z_x, 2),
nrow = 2, ncol = 2, byrow = TRUE
)
data_matrix <- mvrnorm(n=n, mu=c(0, 0), Sigma=variance_covariance_matrix)
d <- data.frame(
id = 1:n,
z  = data_matrix[ , 1],
x  = data_matrix[ , 2]) %>%
mutate(
y = beta0 + (beta1 * z) + (beta2 * x) + rnorm(n=n)
)
if(length(long_or_short) == 2) {
stop('Pick `long_or_short` to be either "long" or "short!"')
} else if(long_or_short == 'long') {
model <- lm(y ~ z + x, data = d)
} else if(long_or_short == 'short') {
model <- lm(y ~ z, data = d)
}
return(model)
}
omitted_variables_bias(long_or_short = 'long')
omitted_variables_bias(long_or_short = 'long')
omitted_variables_bias(long_or_short = 'long')
simulation <- function(long_or_short='long', cov_z_x=0) {
estimated_results <- rep(NA, 1000)
pb <- progress_bar$new(total = 1000)
for(i in 1:1000) {
estimated_results[i] <- coef(omitted_variables_bias(cov_z_x = cov_z_x, long_or_short = long_or_short))['z']
pb$tick()
}
ggplot() +
aes(x = estimated_results) +
geom_histogram(bins = 30)
}
## 1. Estimate the long model, with no covariance between z and x
simulation(long_or_short = 'long', cov_z_x = 0)
## 2. Estimate the short model, with no covariance between z and x
simulation(long_or_short = 'short', cov_z_x = 0)
## 2. Estimate the short model, with no covariance between z and x
simulation(long_or_short = 'short', cov_z_x = 0)
simulation(long_or_short = 'long', cov_z_x = .1)
## 4. Estimate the short model, with 0.1 covariance between z and x
simulation(long_or_short = 'short', cov_z_x = .1)
simulation(long_or_short = 'long', cov_z_x = .9)
simulation(long_or_short = 'short', cov_z_x = .9)
simulation <- function(long_or_short='long', cov_z_x=0, beta2=2) {
estimated_results <- rep(NA, 1000)
pb <- progress_bar$new(total = 1000)
for(i in 1:1000) {
estimated_results[i] <- coef(omitted_variables_bias(cov_z_x = cov_z_x, long_or_short = long_or_short, beta2=beta2))['z']
pb$tick()
}
ggplot() +
aes(x = estimated_results) +
geom_histogram(bins = 30)
}
simulation(long_or_short = 'long', cov_z_x = .9, beta2 = 10)
## 8. Estimate the short model with 0.1 covariance between z and x, but with `beta2=10`
simulation(long_or_short = 'short', cov_z_x = .9, beta2 = 10)
rm(list = ls())
cov_z_x = 0
variance_covariance_matrix <- matrix(
data = c(2, cov_z_x, cov_z_x, 2),
nrow = 2, ncol = 2, byrow = TRUE
)
variance_covariance_matrix
n=n
n=100
mvrnorm(n=n, mu=c(0, 0), Sigma=variance_covariance_matrix)
data_matrix <- mvrnorm(n=n, mu=c(0, 0), Sigma=variance_covariance_matrix)
cov(data_matrix[,1], data_matrix[,2])
cov_z_x = 1
variance_covariance_matrix <- matrix(
data = c(2, cov_z_x, cov_z_x, 2),
nrow = 2, ncol = 2, byrow = TRUE
)
data_matrix <- mvrnorm(n=n, mu=c(0, 0), Sigma=variance_covariance_matrix)
cov(data_matrix[,1], data_matrix[,2])
library(dplyr)
library(ggplot2)
library(MASS)
library(progress)
## this supposes a true model that is:
## y ~ \beta_{0} + \beta_{1}z_{i} + \beta_{2}x_{x} + \epsilon_{i}
##
## and an actually estimated model that is:
## y ~ \tilde{\beta}_{0} + \tilde{\beta}_{1}z_{i} + \tilde{epsilon}_{i}
omitted_variables_bias <- function(
n=100, beta0=0, beta1=1, beta2=2, cov_z_x=0,
long_or_short=c('long', 'short')) {
require(dplyr)
require(MASS)
variance_covariance_matrix <- matrix(
data = c(2, cov_z_x, cov_z_x, 2),
nrow = 2, ncol = 2, byrow = TRUE
)
data_matrix <- mvrnorm(n=n, mu=c(0, 0), Sigma=variance_covariance_matrix)
d <- data.frame(
id = 1:n,
z  = data_matrix[ , 1],
x  = data_matrix[ , 2]) %>%
mutate(
y = beta0 + (beta1 * z) + (beta2 * x) + rnorm(n=n)
)
if(length(long_or_short) == 2) {
stop('Pick `long_or_short` to be either "long" or "short!"')
} else if(long_or_short == 'long') {
model <- lm(y ~ z + x, data = d)
} else if(long_or_short == 'short') {
model <- lm(y ~ z, data = d)
}
return(model)
}
library(dplyr)
library(ggplot2)
library(MASS)
library(progress)
omitted_variables_bias <- function(
n=100, beta0=0, beta1=1, beta2=2, cov_z_x=0,
long_or_short=c('long', 'short')) {
require(dplyr)
require(MASS)
variance_covariance_matrix <- matrix(
data = c(2, cov_z_x, cov_z_x, 2),
nrow = 2, ncol = 2, byrow = TRUE
)
data_matrix <- mvrnorm(n=n, mu=c(0, 0), Sigma=variance_covariance_matrix)
d <- data.frame(
id = 1:n,
z  = data_matrix[ , 1],
x  = data_matrix[ , 2]) %>%
mutate(
y = beta0 + (beta1 * z) + (beta2 * x) + rnorm(n=n)
)
if(length(long_or_short) == 2) {
stop('Pick `long_or_short` to be either "long" or "short!"')
} else if(long_or_short == 'long') {
model <- lm(y ~ z + x, data = d)
} else if(long_or_short == 'short') {
model <- lm(y ~ z, data = d)
}
return(model)
}
View(omitted_variables_bias)
omitted_variables_bias(n=100, long_or_short = 'long')
omitted_variables_bias(n=100, long_or_short = 'long')
omitted_variables_bias(n=100, long_or_short = 'long')
omitted_variables_bias(n=100, long_or_short = 'long')
omitted_variables_bias(n=100, long_or_short = 'long')
omitted_variables_bias(n=100, long_or_short = 'long')
simulation <- function(long_or_short='long', cov_z_x=0, beta2=2) {
estimated_results <- rep(NA, 1000)
pb <- progress_bar$new(total = 1000)
for(i in 1:1000) {
estimated_results[i] <- coef(omitted_variables_bias(cov_z_x = cov_z_x, long_or_short = long_or_short, beta2=beta2))['z']
pb$tick()
}
ggplot() +
aes(x = estimated_results) +
geom_histogram(bins = 30)
}
## 1. Estimate the long model, with no covariance between z and x
omitted_variables_bias(cov_z_x = 0, long_or_short = 'short')
## 1. Estimate the long model, with no covariance between z and x
omitted_variables_bias(cov_z_x = 0, long_or_short = 'long')
simulation(long_or_short = 'long', cov_z_x = 0)
simulation(long_or_short = 'short', cov_z_x = 0)
simulation(long_or_short = 'long', cov_z_x = 0.1)
simulation(long_or_short = 'short', cov_z_x = 0.1)
simulation <- function(long_or_short='long', cov_z_x=0, beta2=2) {
estimated_results <- rep(NA, 1000)
pb <- progress_bar$new(total = 1000)
for(i in 1:1000) {
estimated_results[i] <- coef(omitted_variables_bias(cov_z_x = cov_z_x, long_or_short = long_or_short, beta2=beta2))['z']
pb$tick()
}
ggplot() +
aes(x = estimated_results) +
geom_histogram(bins = 30) +
coord_cartesian(xlim = c(0, 2))
}
simulation(long_or_short = 'long', cov_z_x = 0.1)
## 4. Estimate the short model, with 0.1 covariance between z and x
simulation(long_or_short = 'short', cov_z_x = 0.1)
simulation <- function(long_or_short='long', cov_z_x=0, beta2=2) {
estimated_results <- rep(NA, 1000)
pb <- progress_bar$new(total = 1000)
for(i in 1:1000) {
estimated_results[i] <- coef(omitted_variables_bias(cov_z_x = cov_z_x, long_or_short = long_or_short, beta2=beta2))['z']
pb$tick()
}
ggplot() +
aes(x = estimated_results) +
geom_histogram(bins = 30)
}
simulation(long_or_short = 'long', cov_z_x = 0.5)
simulation(long_or_short = 'short', cov_z_x = 0.1, beta2 = 10)
simulation(long_or_short = 'short', cov_z_x = 0.5, beta2 = 10)
d <- data.table::fread('~/Downloads/Batch_4616774_batch_results.csv')
d
View(d)
View(d)
d <- data.table::fread('~/Downloads/cps_00001.csv')
d
d[ , table(VOREG)]
d[ , table(VOREG, useNA = TRUE)]
d[ , table(VOREG, useNA)]
?table
d[ , table(VOREG, useNA = 'always')]
LETTERS[1:10]
d <- data.table(
group = sample(LETTERS[1:10], size = 100, replace = TRUE),
treat = sample(c('control', 'treatment'), size = 100, replace = TRUE)
)
d[ , y := 1 + 2 * I(treat == 'treatment') + 3 * I(group == 'A') + rnorm(n=100)]
d <- data.table(
group = sample(LETTERS[1:10], size = 100, replace = TRUE),
treat = sample(c('control', 'treatment'), size = 100, replace = TRUE)
)
d <- data.table::data.table(
group = sample(LETTERS[1:10], size = 100, replace = TRUE),
treat = sample(c('control', 'treatment'), size = 100, replace = TRUE)
)
d[ , y := 1 + 2 * I(treat == 'treatment') + 3 * I(group == 'A') + rnorm(n=100)]
not_saturated_model <- d[ , lm(y ~ factor(treat) + factor(group) + factor(treat)*factor(group))]
summary(not_saturated)
summary(not_saturated_model)
stargazer::stargazer(
not_saturated_model, saturated_model,
type = 'text'
)
saturated_model <- d[ , lm(y ~ -1 + factor(treat) + factor(group) + factor(treat)*factor(group))]
stargazer::stargazer(
not_saturated_model, saturated_model,
type = 'text'
)
stargazer::stargazer(
not_saturated_model, saturated_model,
type = 'text',
omit.stat = c('rse', 'F')
)
stargazer::stargazer(
not_saturated_model, saturated_model,
type = 'text',
omit.stat = c('ser', 'F')
)
install.packages('magrittr')
install.packages('tidyverse')
install.packages('tidyverse')
library(tidyverse)
library(tidyverse)
knitr::include_app(url = 'http://statistics.wtf/betahat/', height = '1200px')
knitr::include_url(url = "https://ischool.datahub.berkeley.edu")
( 10 ^ 300 ) / 100000
( 10 ^ 300 ) / (100 * 10^9)
getwd()
setwd('~/MIDS/w241/mids-w241-live-session/')
bookdown::render_book(output_format = 'bookdown::pdf_book', output_dir = "docs")
bookdown::render_book(output_format = 'bookdown::bookdown_book', output_dir = "docs")
bookdown::render_book(output_format = 'bookdown::gitbook', output_dir = "docs")
bookdown::render_book(output_format = 'bookdown::gitbook', output_dir = "docs")
bookdown::render_book(output_format = 'bookdown::pdf_book', output_dir = "docs")
make_simple_data <- function(size=100) {
require(data.table)
d <- data.table(id = 1:100)
d[ , y0 := runif(.N, min = 0, max = 1)]
d[ , y1 := y0 + .25]
return(d)
}
d <- make_simple_data(size=100)
d[1:10]
d[1:5]
d[1:5]
d[ , experimental_assignment := sample(0:1, size = .N, replace = TRUE)]
d[1:5]
d[1:5]
first_plot <- ggplot(data=d) +
geom_point(aes(x = id, y = y0), color = blue) +
geom_point(aes(x = id, y = y1), color = gold)
library(data.table)
library(ggplot2)
blue <- '#003262'
gold <- '#FDB515'
first_plot <- ggplot(data=d) +
geom_point(aes(x = id, y = y0), color = blue) +
geom_point(aes(x = id, y = y1), color = gold)
first_plot
first_plot +
geom_segment(
aes(x = id, xend = id, y = y0, yend = y1),
arrow = arrow(ends = 'last', length = unit(0.1, "inches"), type = 'closed'),
color = 'grey70'
)
second_plot <- ggplot(data = d) +
geom_point(aes(x = id, y = y0, size = 1 - experimental_assignment), color = blue) +
geom_point(aes(x = id, y = y1, size = experimental_assignment - 1), color = gold)
second_plot
second_plot <- ggplot(data = d) +
geom_point(aes(x = id, y = y0, size = 1 - experimental_assignment), color = blue) +
geom_point(aes(x = id, y = y1, size = experimental_assignment - 1), color = gold) +
labs(
title = 'Treatment and Control Assignment',
color = 'Treatment or Control'
)
second_plot
second_plot <- ggplot(data = d) +
geom_point(aes(x = id, y = y0, size = 1 - experimental_assignment), color = blue) +
geom_point(aes(x = id, y = y1, size = 0 + experimental_assignment), color = gold) +
labs(
title = 'Treatment and Control Assignment',
color = 'Treatment or Control'
)
second_plot
third_plot <- second_plot +
geom_hline(yintercept = mean(d[experimental_assignment==0, y0]), color = blue, linetype = 2) +
geom_hline(yintercept = mean(d[experimental_assignment==1, y1]), color = gold, linetype = 2)
third_plot
third_plot +
geom_hline(yintercept = mean(d[, y0]), color = blue, linetype = 1) +
geom_hline(yintercept = mean(d[, y1]), color = gold, linetype = 1) +
second_plot <- ggplot(data = d) +
geom_point(aes(x = id, y = y0, size = 1 - experimental_assignment), color = blue) +
geom_point(aes(x = id, y = y1, size = 0 + experimental_assignment), color = gold) +
labs(
title = 'Treatment and Control Assignment',
color = 'Treatment or Control'
)
second_plot
second_plot <- ggplot(data = d) +
geom_point(aes(x = id, y = y0, size = 1 - experimental_assignment), color = blue) +
geom_point(aes(x = id, y = y1, size = 0 + experimental_assignment), color = gold) +
labs(
title = 'Treatment and Control Assignment',
size = 'Treatment or Control'
)
second_plot
third_plot <- second_plot +
geom_hline(yintercept = mean(d[experimental_assignment==0, y0]), color = blue, linetype = 2) +
geom_hline(yintercept = mean(d[experimental_assignment==1, y1]), color = gold, linetype = 2)
third_plot
third_plot +
geom_hline(yintercept = mean(d[, y0]), color = blue, linetype = 1) +
geom_hline(yintercept = mean(d[, y1]), color = gold, linetype = 1)
selection_plot <- ggplot(d) +
geom_point(aes(x = id, y = y0, size = 1 - observational_selection), color = blue) +
geom_point(aes(x = id, y = y1, size = 0 + observational_selection), color = gold) +
geom_hline(yintercept = d[observational_selection == 0, mean(y0)], color = blue, linetype = 2) +
geom_hline(yintercept = d[observational_selection == 1, mean(y1)], color = gold, linetype = 2) +
geom_hline(yintercept = mean(d[, y0]), color = blue, linetype = 1) +
geom_hline(yintercept = mean(d[, y1]), color = gold, linetype = 1) +
labs(
title = 'Observational Selection into Treatment',
size = 'Treatment or Control'
)
library(data.table)
library(ggplot2)
blue <- '#003262'
gold <- '#FDB515'
conduct_sample <- function(size) {
runif(n=size, min=0, max=10)
}
theta_1 <- function(data) {
# take the first element
}
theta_2 <- function(data) {
# sum the first two elements and divide by two
}
theta_3 <- function(data) {
# sum the sample, and divide by 1 less than the sample size
}
theta_4 <- function(data) {
# sum the sample, and divide by the sample size
# honestly, just use the mean call.
# clearly, this is a silly function to write, since you're just
# providing an alias, without modification, to an existing function.
mean(data)
}
theta_4(conduct_sample(size=100))
make_simple_data <- function(size=100) {
require(data.table)
d <- data.table(id = 1:100)
d[ , y0 := runif(.N, min = 0, max = 1)]
d[ , y1 := y0 + .25]
return(d)
}
d <- make_simple_data(size=100)
d[1:5]
d[ , experimental_assignment := sample(0:1, size = .N, replace = TRUE)]
d[1:5]
d[ , observational_selection := ifelse(y0 < .33, 1, 0)]
d[1:5]
first_plot <- ggplot(data=d) +
geom_point(aes(x = id, y = y0), color = blue) +
geom_point(aes(x = id, y = y1), color = gold)
first_plot
first_plot +
geom_segment(
aes(x = id, xend = id, y = y0, yend = y1),
arrow = arrow(ends = 'last', length = unit(0.1, "inches"), type = 'closed'),
color = 'grey70'
)
second_plot <- ggplot(data = d) +
geom_point(aes(x = id, y = y0, size = 1 - experimental_assignment), color = blue) +
geom_point(aes(x = id, y = y1, size = 0 + experimental_assignment), color = gold) +
labs(
title = 'Treatment and Control Assignment',
size = 'Treatment or Control'
)
second_plot
third_plot <- second_plot +
geom_hline(yintercept = mean(d[experimental_assignment==0, y0]), color = blue, linetype = 2) +
geom_hline(yintercept = mean(d[experimental_assignment==1, y1]), color = gold, linetype = 2)
third_plot
third_plot +
geom_hline(yintercept = mean(d[, y0]), color = blue, linetype = 1) +
geom_hline(yintercept = mean(d[, y1]), color = gold, linetype = 1)
selection_plot <- ggplot(d) +
geom_point(aes(x = id, y = y0, size = 1 - observational_selection), color = blue) +
geom_point(aes(x = id, y = y1, size = 0 + observational_selection), color = gold) +
geom_hline(yintercept = d[observational_selection == 0, mean(y0)], color = blue, linetype = 2) +
geom_hline(yintercept = d[observational_selection == 1, mean(y1)], color = gold, linetype = 2) +
geom_hline(yintercept = mean(d[, y0]), color = blue, linetype = 1) +
geom_hline(yintercept = mean(d[, y1]), color = gold, linetype = 1) +
labs(
title = 'Observational Selection into Treatment',
size = 'Treatment or Control'
)
selection_plot
bookdown::render_book(clean = TRUE)
bookdown::render_book(clean = TRUE, output_format = 'bookdown::render_pdf')
bookdown::render_book(clean = TRUE, output_format = 'bookdown::pdf_book')
bookdown::render_book(clean = TRUE)
bookdown::render_book(clean = TRUE, output_format = 'bookdown::pdf_book')
?bookdown::create_gitbook
bookdown::create_gitbook(path = '~/Desktop/foo2')
theta_4(conduct_sample(size=100))
