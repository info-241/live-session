petersen <- sandwich::petersenCL
petersen <- sandwich::PetersenCL
data("PetersenCL")
data("PetersenCL")
library(sandwich)
data(
"PetersenCL"
)
View(PetersenCL)
m1 <- lm(y ~ x, data = petersenCL)
m1 <- lm(y ~ x, data = PetersenCL)
summary(m1)
vcovCL
?vcovCL
## when we clusetr
coeftest(m1, vcovCL(m1, ~ firm))
library(data.table)
library(stargazer)
library(sandwich)
library(lmtest)
## when we clusetr
coeftest(m1, vcovCL(m1, ~ firm))
## when we don't cluster
coeftest(m1, vcov(m1))
## when we clusetr
coeftest(m1, vcovCL(m1, ~ firm))
## when we don't cluster
coeftest(m1, vcov(m1))
# Cluster by both firm, and year
coeftest(m1, vcovCL(m1, ~ firm + year))
stargazer(m1, m1, m1,
se = list(sqrt(diag(vcov(m1))),
sqrt(diag(vcovCL(m1, ~ firm))),
sqrt(diag(vcovCL(m1, ~ firm + year)))),
header = FALSE)
stargazer(m1, m1, m1,
se = list(sqrt(diag(vcov(m1))),
sqrt(diag(vcovCL(m1, ~ firm))),
sqrt(diag(vcovCL(m1, ~ firm + year)))),
type = 'html'
header = FALSE)
stargazer(m1, m1, m1,
se = list(sqrt(diag(vcov(m1))),
sqrt(diag(vcovCL(m1, ~ firm))),
sqrt(diag(vcovCL(m1, ~ firm + year)))),
type = 'html',
header = FALSE)
vcovCL(m1, ~ firm)
vcovCL(m1, ~ firm + year)
stargazer(m1, m1, m1,
se = list(sqrt(diag(vcov(m1))),
sqrt(diag(vcovCL(m1, ~ firm))),
sqrt(diag(vcovCL(m1, ~ firm + year)))),
type = 'html',
header = FALSE)
PetersenCL
rm(list = ls())
library(data.table)
library(stargazer)
library(sandwich)
library(lmtest)
rse <- function(model) {
sqrt(diag(vcovHC(model)))
}
make_data <- function(n_rows=1000) {
d <- data.table(
id = 1:n_rows,
key = 'id'
)
d[ , ':='(
y0           = runif(min=-10, max=10, n=.N),
tau          = rnorm(n=.N, mean=4),
D            = sample(x=0:1, size=.N, replace=TRUE))][ , ':='(
bad_control  = 1 * D + rnorm(n=.N, mean=0))][ , ':='(
Y            = y0 + D*tau + bad_control + rnorm(n=.N)
)]
}
d <- make_data(n_rows=1000)
model_1 <- d[ , lm(Y ~ D)]
model_2 <- d[ , lm(Y ~ bad_control)]
stargazer(
model_1, model_2,
type = 'text',
se = list(rse(model_1), rse(model_2)),
omit.stat = c('ser', 'f')
)
model_3 <- d[ , lm(Y ~ D + bad_control)]
stargazer(
model_1, model_2, model_3,
type = 'text',
se = list(rse(model_1), rse(model_2), rse(model_3))
)
# 1. create data.table
# 2. create potential outcomes to control
# 3. create a randomly assigned treatment indicator
# 4. have that treatment indicator and potential outcomes to control
#   cause outcomes in B.
# 5. dichotomize B (think of it like "finishing college" in MHE)
# 6. build the potential outcomes to treatment as the joint effects of
#   a. potential outcomes to control
#   b. the effect of B (which was caused by treatment)
#   c. the direct effect of treatment on the outcome variable
# 7 make an "observed Y" vector, just like usual.
n_rows <- 100
d <- data.table(id = 1:n_rows)
d[ , y0    := sample(-10:10, n_rows, replace = T)]
d[ , treat := sample(c(0,1), n_rows, replace = TRUE)]
d[ , B     := y0 + 5 * treat + rnorm(n_rows, mean= 0, sd = 4)]
d[ , B     := B > 0]
d[ , y1    := y0 + B + 10 * treat + round(rnorm(n_rows, mean= 0, sd = 4), 0)]
d[ , Y     := y1*treat + y0*(1-treat)]
hist(d[,Y], col = "grey",
main = "Histogram of Observed Outcomes")
m1 <- glm(Y ~ treat, data = d, family = "gaussian")
stargazer(m1, type = "latex", omit.stat = "f", header = FALSE)
m2  <- glm(Y ~ treat + B, data = d, family = "gaussian")
m3a <- glm(Y ~ treat, data = d[B==TRUE], family = "gaussian")
m3b <- glm(Y ~ treat, data = d[B==FALSE], family = "gaussian")
stargazer(m1, m2, m3a, m3b, omit.stat = "f", header = FALSE,
add.lines = list(c("Subset B?", "All", "All", "T", "F"))
)
stargazer(m1, m1, m1,
se = list(sqrt(diag(vcov(m1))),
sqrt(diag(vcovCL(m1, ~ firm))),
sqrt(diag(vcovCL(m1, ~ firm + year)))),
type = 'html',
header = FALSE)
sqrt(diag(vcovCL(m1, ~ firm)))
m1
data("PetersenCL", package = "sandwich")
m1 <- lm(y ~ x, data = PetersenCL)
summary(m1)
## when we clusetr
coeftest(m1, vcovCL(m1, ~ firm))
## when we don't cluster
coeftest(m1, vcov(m1))
# Cluster by both firm, and year
coeftest(m1, vcovCL(m1, ~ firm + year))
stargazer(m1, m1, m1,
se = list(sqrt(diag(vcov(m1))),
sqrt(diag(vcovCL(m1, ~ firm))),
sqrt(diag(vcovCL(m1, ~ firm + year)))),
type = 'html',
header = FALSE)
rm(list = ls())
library(data.table)
library(stargazer)
library(sandwich)
library(lmtest)
rse <- function(model) {
sqrt(diag(vcovHC(model)))
}
make_data <- function(n_rows=1000) {
d <- data.table(
id = 1:n_rows,
key = 'id'
)
d[ , ':='(
y0           = runif(min=-10, max=10, n=.N),
tau          = rnorm(n=.N, mean=4),
D            = sample(x=0:1, size=.N, replace=TRUE))][ , ':='(
bad_control  = 1 * D + rnorm(n=.N, mean=0))][ , ':='(
Y            = y0 + D*tau + bad_control + rnorm(n=.N)
)]
}
d <- make_data(n_rows=1000)
model_1 <- d[ , lm(Y ~ D)]
model_2 <- d[ , lm(Y ~ bad_control)]
stargazer(
model_1, model_2,
type = 'text',
se = list(rse(model_1), rse(model_2)),
omit.stat = c('ser', 'f')
)
model_3 <- d[ , lm(Y ~ D + bad_control)]
stargazer(
model_1, model_2, model_3,
type = 'text',
se = list(rse(model_1), rse(model_2), rse(model_3))
)
# 1. create data.table
# 2. create potential outcomes to control
# 3. create a randomly assigned treatment indicator
# 4. have that treatment indicator and potential outcomes to control
#   cause outcomes in B.
# 5. dichotomize B (think of it like "finishing college" in MHE)
# 6. build the potential outcomes to treatment as the joint effects of
#   a. potential outcomes to control
#   b. the effect of B (which was caused by treatment)
#   c. the direct effect of treatment on the outcome variable
# 7 make an "observed Y" vector, just like usual.
n_rows <- 100
d <- data.table(id = 1:n_rows)
d[ , y0    := sample(-10:10, n_rows, replace = T)]
d[ , treat := sample(c(0,1), n_rows, replace = TRUE)]
d[ , B     := y0 + 5 * treat + rnorm(n_rows, mean= 0, sd = 4)]
d[ , B     := B > 0]
d[ , y1    := y0 + B + 10 * treat + round(rnorm(n_rows, mean= 0, sd = 4), 0)]
d[ , Y     := y1*treat + y0*(1-treat)]
hist(d[,Y], col = "grey",
main = "Histogram of Observed Outcomes")
m1 <- glm(Y ~ treat, data = d, family = "gaussian")
stargazer(m1, type = "latex", omit.stat = "f", header = FALSE)
m2  <- glm(Y ~ treat + B, data = d, family = "gaussian")
m3a <- glm(Y ~ treat, data = d[B==TRUE], family = "gaussian")
m3b <- glm(Y ~ treat, data = d[B==FALSE], family = "gaussian")
stargazer(m1, m2, m3a, m3b, omit.stat = "f", header = FALSE,
add.lines = list(c("Subset B?", "All", "All", "T", "F"))
)
data("PetersenCL", package = "sandwich")
m1 <- lm(y ~ x, data = PetersenCL)
summary(m1)
## when we clusetr
coeftest(m1, vcovCL(m1, ~ firm))
## when we don't cluster
coeftest(m1, vcov(m1))
# Cluster by both firm, and year
coeftest(m1, vcovCL(m1, ~ firm + year))
stargazer(m1, m1, m1,
se = list(sqrt(diag(vcov(m1))),
sqrt(diag(vcovCL(m1, ~ firm))),
sqrt(diag(vcovCL(m1, ~ firm + year)))),
type = 'html',
header = FALSE)
getwd()
setwd('~/MIDS/w241/mids-w241-live-session/')
bookdown::render_book()
d <- fread('http://hdl.handle.net/10079/cd6be01a-a827-4312-a2fa-74329ce7f96d')
d
bookdown::render_book()
d <- data.table(
name = rep(c('colin', 'jose'), each = 200),
grammar = rep(c('good', 'bad'), each = 100),
legislator = rep(c('hispanic', 'non-hispanic'), each = 50)
)
d
d[ , .N, by = .(name, grammar, legislator)]
d
d[name == 'colin' & grammar == 'good' & legislator == 'non-hispanic' , respond := c(rep(1, 21), 50 - 21)]
d[name == 'colin' & grammar == 'good' & legislator == 'non-hispanic' , respond := c(rep(1, 21), rep(0, 50 - 21))]
d[name == 'colin' & grammar == 'good' & legislator == 'non-hispanic' , respond := c(rep(1, 31), rep(0, 50 - 31))]
d[name == 'colin' & grammar == 'good' & legislator == 'hispanic' ,     respond := c(rep(1, 21), rep(0, 50 - 21))]
d[name == 'colin' & grammar == 'bad'  & legislator == 'non-hispanic' , respond := c(rep(1, 17), rep(0, 50 - 17))]
d[name == 'colin' & grammar == 'bad'  & legislator == 'hispanic' ,     respond := c(rep(1, 12), rep(0, 50 - 12))]
d[name == 'jose'  & grammar == 'good' & legislator == 'non-hispanic' , respond := c(rep(1, 20), rep(0, 50 - 20))]
d[name == 'jose'  & grammar == 'good' & legislator == 'hispanic' ,     respond := c(rep(1, 17), rep(0, 50 - 17))]
d[name == 'jose'  & grammar == 'bad'  & legislator == 'non-hispanic' , respond := c(rep(1, 18), rep(0, 50 - 18))]
d[name == 'jose'  & grammar == 'bad'  & legislator == 'hispanic' ,     respond := c(rep(1, 16), rep(0, 50 - 16))]
d <- data.table(
name = rep(c('colin', 'jose'), each = 200),
grammar = rep(c('good', 'bad'), each = 100),
legislator = rep(c('hispanic', 'non-hispanic'), each = 50)
)
d[ , .N, by = .(name, grammar, legislator)]
c(21, )
d[name == 'colin' & grammar == 'good' & legislator == 'non-hispanic' , respond := c(rep(1, 31), rep(0, 50 - 31))]
d[name == 'colin' & grammar == 'good' & legislator == 'hispanic' ,     respond := c(rep(1, 21), rep(0, 50 - 21))]
d[name == 'colin' & grammar == 'bad'  & legislator == 'non-hispanic' , respond := c(rep(1, 17), rep(0, 50 - 17))]
d[name == 'colin' & grammar == 'bad'  & legislator == 'hispanic' ,     respond := c(rep(1, 12), rep(0, 50 - 12))]
d[name == 'jose'  & grammar == 'good' & legislator == 'non-hispanic' , respond := c(rep(1, 20), rep(0, 50 - 20))]
d[name == 'jose'  & grammar == 'good' & legislator == 'hispanic' ,     respond := c(rep(1, 17), rep(0, 50 - 17))]
d[name == 'jose'  & grammar == 'bad'  & legislator == 'non-hispanic' , respond := c(rep(1, 18), rep(0, 50 - 18))]
d[name == 'jose'  & grammar == 'bad'  & legislator == 'hispanic' ,     respond := c(rep(1, 16), rep(0, 50 - 16))]
d
model_one <- d[ , lm(respond ~ name + grammar + legislator)]
summary(model_one)
model_two <- d[ , lm(respond ~ name + grammar + legislator + name * grammar)]
summary(model_two)
model_two <- d[ , lm(respond ~ name + grammar + legislator + name * grammar + name * legislator + grammar * legislator)]
summary(model_two)
model_two <- d[ , lm(respond ~ name + grammar + legislator + name * grammar + name * legislator + grammar * legislator + name * legislator * grammar)]
summary(model_two)
model_three <- d[ , lm(respond ~ 1- name + grammar + legislator + name * grammar + name * legislator + grammar * legislator + name * legislator * grammar)]
summary(model_three)
model_three <- d[ , lm(respond ~ - 1 + name + grammar + legislator + name * grammar + name * legislator + grammar * legislator + name * legislator * grammar)]
summary(model_three)
d[ , treatment_string := paste0(name, grammar, legislator)]
d
d[ , treatment_string := paste(name, grammar, legislator, sep = '-')]
d
model_four <- d[ , lm(respond ~ treatment_string)]
summary(model_four)
model_four <- d[ , lm(respond ~ -1 + treatment_string)]
summary(model_four)
model_four <- d[ , lm(respond ~ treatment_string)]
summary(model_four)
model_four <- d[ , lm(respond ~ -1 + treatment_string)]
summary(model_four)
broom::broom(model_four)
broom::tidy(model_four)
df1 <- broom::tidy(model_four)
df1[sort(df1$p.value) , ]
df1[order(df1$p.value) , ]
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
d <- data.table(
name = rep(c('colin', 'jose'), each = 200),
grammar = rep(c('good', 'bad'), each = 100),
legislator = rep(c('hispanic', 'non-hispanic'), each = 50)
)
d
d[ , .N, by = .(name, grammar, legislator)]
d[name == 'colin' & grammar == 'good' & legislator == 'non-hispanic' , respond := c(rep(1, 31), rep(0, 50 - 31))]
d[name == 'colin' & grammar == 'good' & legislator == 'hispanic' ,     respond := c(rep(1, 21), rep(0, 50 - 21))]
d[name == 'colin' & grammar == 'bad'  & legislator == 'non-hispanic' , respond := c(rep(1, 17), rep(0, 50 - 17))]
d[name == 'colin' & grammar == 'bad'  & legislator == 'hispanic' ,     respond := c(rep(1, 12), rep(0, 50 - 12))]
d[name == 'jose'  & grammar == 'good' & legislator == 'non-hispanic' , respond := c(rep(1, 20), rep(0, 50 - 20))]
d[name == 'jose'  & grammar == 'good' & legislator == 'hispanic' ,     respond := c(rep(1, 17), rep(0, 50 - 17))]
d[name == 'jose'  & grammar == 'bad'  & legislator == 'non-hispanic' , respond := c(rep(1, 18), rep(0, 50 - 18))]
d[name == 'jose'  & grammar == 'bad'  & legislator == 'hispanic' ,     respond := c(rep(1, 16), rep(0, 50 - 16))]
d
source("~/.active-rstudio-document")
model_one <- d[ , lm(respond ~ name + grammar + legislator)]
summary(model_one)
source("~/.active-rstudio-document", echo=TRUE)
model_two <- d[ , lm(respond ~ name + grammar + legislator + name * grammar + name * legislator + grammar * legislator + name * grammar * legislator)]
summary(model_two)
source("~/.active-rstudio-document")
d[ , treatment_string := paste(name, grammar, legislator, sep = '-')]
d
model_three <- d[ , lm(respond ~ treatment_string)]
summary(model_three)
model_three <- d[ , lm(respond ~ -1 + treatment_string)]
summary(model_three)
model_three <- d[ , lm(respond ~ -1 + treatment_string)]
summary(model_three, digits = 8)
coefficients(model_three)
coefficients(model_three)[1]
d <- fread('http://hdl.handle.net/10079/cd6be01a-a827-4312-a2fa-74329ce7f96d')
d
d
model_one <- d[ , lm(tip ~ happyface)]
lmtest::coeftest(model_one, vcov = vcovHC(model_one))
model_two <- d[ , lm(tip ~ female)]
lmtest::coeftest(model_two, vcov = vcovHC(model_two))
model_two <- d[ , lm(tip ~ female + happyface)]
lmtest::coeftest(model_two, vcov = vcovHC(model_two))
model_two <- d[ , lm(tip ~ female + happyface + female * hapyface)]
model_two <- d[ , lm(tip ~ female + happyface + female * hapyface)]
model_two <- d[ , lm(tip ~ female + happyface + female * happyface)]
lmtest::coeftest(model_two, vcov = vcovHC(model_two))
model_male   <- d[female == 0, lm(tip ~ happyface)]
model_female <- d[female == 1, lm(tip ~ happyface)]
stargazer::stargazer(
model_male, model_female, type = 'text'
)
stargazer::stargazer(
model_two, model_male, model_female, type = 'text'
)
d[ , tip == 0, by = female]
d[ , sum(tip == 0), by = female]
summary(d[tip != 0, lm(tip ~ happyface * female)])
model_two
summary(model_two)
tidy_model <- broom::tidy(model_two)
tidy_model
tidy_model[order(tidy_model$p.value), ]
source("~/.active-rstudio-document", echo=TRUE)
library(dplyr)
x <- 1:10
y <- c(2,3,2,4,3,5,4,6,5,7)
d <- data.frame(
x=x, y=y)
d
plot(x,y)
abline(lm(y~x))
find_slope <- function(point_1, point_2) {
## this takes a given set of points that are
## entered as an c(x,y) tuple, and returns
## the slope between them
rise <- point_2[2] - point_1[2]
run  <- point_2[1] - point_1[1]
slope <- as.numeric(rise / run) * (1/run^2)
return(slope)
}
find_all_slopes <- function(data_frame) {
n_rows <- nrow(data_frame)
slope <- matrix(data=NA, nrow=n_rows, ncol=n_rows)
for(i in 1:n_rows) {
for(j in 1:n_rows) {
slope[i,j] <- find_slope(point_1=data_frame[i,], point_2=data_frame[j,])
}
}
return(mean(slope, na.rm = TRUE))
}
find_all_slopes(d)
lm(y ~ x)
find_slope <- function(point_1, point_2) {
## this takes a given set of points that are
## entered as an c(x,y) tuple, and returns
## the slope between them
rise <- point_2[2] - point_1[2]
run  <- point_2[1] - point_1[1]
slope <- as.numeric(rise / run) * (1/run^2)
return(slope)
}
library(dplyr)
x <- 1:10
y <- c(2,3,2,4,3,5,4,6,5,7)
d <- data.frame(
x=x, y=y)
d
plot(x,y)
abline(lm(y~x))
find_slope <- function(point_1, point_2) {
## this takes a given set of points that are
## entered as an c(x,y) tuple, and returns
## the slope between them
rise <- point_2[2] - point_1[2]
run  <- point_2[1] - point_1[1]
slope <- as.numeric((rise / run) * (1/run^2))
return(slope)
}
find_all_slopes <- function(data_frame) {
n_rows <- nrow(data_frame)
slope <- matrix(data=NA, nrow=n_rows, ncol=n_rows)
for(i in 1:n_rows) {
for(j in 1:n_rows) {
slope[i,j] <- find_slope(point_1=data_frame[i,], point_2=data_frame[j,])
}
}
return(mean(slope, na.rm = TRUE))
}
find_all_slopes(d)
lm(y ~ x)
library(dplyr)
x <- 1:10
y <- c(2,3,2,4,3,5,4,6,5,7)
d <- data.frame(
x=x, y=y)
d
plot(x,y)
abline(lm(y~x))
find_slope <- function(point_1, point_2) {
## this takes a given set of points that are
## entered as an c(x,y) tuple, and returns
## the slope between them
rise <- point_2[2] - point_1[2]
run  <- point_2[1] - point_1[1]
slope <- as.numeric((rise / run) * (1/run^2))
return(slope)
}
find_all_slopes <- function(data_frame) {
n_rows <- nrow(data_frame)
slope <- matrix(data=NA, nrow=n_rows, ncol=n_rows)
for(i in 1:n_rows) {
for(j in 1:n_rows) {
slope[i,j] <- find_slope(point_1=data_frame[i,], point_2=data_frame[j,])
}
}
return(sum(slope, na.rm = TRUE))
}
find_all_slopes(d)
lm(y ~ x)
library(dplyr)
x <- 1:10
y <- c(2,3,2,4,3,5,4,6,5,7)
d <- data.frame(
x=x, y=y)
d
plot(x,y)
abline(lm(y~x))
find_slope <- function(point_1, point_2) {
## this takes a given set of points that are
## entered as an c(x,y) tuple, and returns
## the slope between them
rise <- point_2[2] - point_1[2]
run  <- point_2[1] - point_1[1]
slope <- as.numeric((rise / run) * (run^2))
return(slope)
}
find_all_slopes <- function(data_frame) {
n_rows <- nrow(data_frame)
slope <- matrix(data=NA, nrow=n_rows, ncol=n_rows)
for(i in 1:n_rows) {
for(j in 1:n_rows) {
slope[i,j] <- find_slope(point_1=data_frame[i,], point_2=data_frame[j,])
}
}
return(sum(slope, na.rm = TRUE))
}
find_all_slopes(d)
lm(y ~ x)
library(dplyr)
x <- 1:10
y <- c(2,3,2,4,3,5,4,6,5,7)
d <- data.frame(
x=x, y=y)
d
plot(x,y)
abline(lm(y~x))
find_slope <- function(point_1, point_2) {
## this takes a given set of points that are
## entered as an c(x,y) tuple, and returns
## the slope between them
rise <- point_2[2] - point_1[2]
run  <- point_2[1] - point_1[1]
slope <- as.numeric((rise / run) * (run^2))
return(slope)
}
find_all_slopes <- function(data_frame) {
n_rows <- nrow(data_frame)
slope <- matrix(data=NA, nrow=n_rows, ncol=n_rows)
for(i in 1:n_rows) {
for(j in 1:n_rows) {
slope[i,j] <- find_slope(point_1=data_frame[i,], point_2=data_frame[j,])
}
}
return(mean(slope, na.rm = TRUE))
}
find_all_slopes(d)
lm(y ~ x)
